import 'react-datepicker/dist/react-datepicker.css';
import './style.css';

import React, { useState } from 'react';
import DatePicker from 'react-datepicker';

import DeleteIcon from '@mui/icons-material/Delete';
import EditIcon from '@mui/icons-material/Edit';
import FileCopyIcon from '@mui/icons-material/FileCopy';
import NoteAddIcon from '@mui/icons-material/NoteAdd';
import {
	Alert,
	Button,
	Card,
	CardContent,
	FormControl,
	Grid,
	InputLabel,
	MenuItem,
	Select,
	SelectChangeEvent,
	Table,
	TableBody,
	TableCell,
	TableContainer,
	TableHead,
	TableRow,
	ToggleButton,
	ToggleButtonGroup,
} from '@mui/material';
import Box from '@mui/material/Box';
import Container from '@mui/material/Container';
import Paper from '@mui/material/Paper';
import Typography from '@mui/material/Typography';

import { fetchCurrentMonthLogs, fetchProjects } from '../api';
import { Logs, Project } from '../models';
import InputCard from './InputCard';
import MonthEndDialog from './MonthEndDialog';
import { StyledTableCell } from './StyledTable';
import TimelogItemList from './TimelogItemList';

export default function MainCard() {
  const [selectedMonth, setSelectedMonth] = useState<Date | null>(null);
  const [availableProjects, setAvailableProjects] = useState<Project[]>([]);
  const [oldLogs, setoldLogs] = useState<Logs>({
    timelogs: [],
    perdiems: [],
  });
  const [project, setProject] = useState<string>('');
  const [projectUuid, setProjectUuid] = useState<string | null>(null);
  const [uuidLog, setUuidLog] = useState<string | null>(null);
  const [projectTypes, setProjectTypes] = useState<string[]>([]);
  const [endMonthOpen, setEndMonthOpen] = useState(false);

  const _dummy_old_logs_1: Logs = {
    timelogs: [
      {
        timelog_id: 67915,
        timelog_uuid: '61b846d5-c33c-4751-8feb-2d0f2068c51e',
        employee_uuid: '61b846c6-2d44-42c4-83ba-2d0f2068c51e',
        project_uuid: '618e86a1-dfc0-4025-84f8-86516d67120b',
        start_dt: 1625119200,
        end_dt: 1625151600,
        timelog_type: 'default',
        json_bag: {
          id: 67915,
          employee_uuid: '61b846c6-2d44-42c4-83ba-2d0f2068c51e',
          startdt: '2021-07-01 06:00:00',
          enddt: '2021-07-01 15:00:00',
          feiertag: '',
          oncall: '',
          project_id: 598,
          project_uuid: '618e86a1-dfc0-4025-84f8-86516d67120b',
          breaklength: 3600,
          travel: '0',
          comment: 'SAP Unicorn - Telefonica',
          onsite: 1,
          subproject: 0,
        },
      },
    ],
    perdiems: [
      {
        date: 1627344000,
        employee: '61b846c6-2d44-42c4-83ba-2d0f2068c51e',
        type: 8,
        projectUuid: '618e86a1-dfc0-4025-84f8-86516d67120b',
        comment: 'St. Leon-Rot - SAP Unicorn Workshop',
      },
      {
        date: 1627344000,
        employee: '61b846c6-2d44-42c4-83ba-2d0f2068c51e',
        type: 8,
        projectUuid: '618e86a1-dfc0-4025-84f8-86516d67120b',
        comment: 'St. Leon-Rot - SAP Unicorn Workshop',
      },
    ],
  };

  const _dummy_old_logs_2: Logs = {
    timelogs: [
      {
        timelog_id: 67915,
        timelog_uuid: '61b846d5-c33c-4751-8feb-2d0f2068c51e',
        employee_uuid: '61b846c6-2d44-42c4-83ba-2d0f2068c51e',
        project_uuid: '618e86a1-dfc0-4025-84f8-86516d67120b',
        start_dt: 1625119200,
        end_dt: 1625151600,
        timelog_type: 'default',
        json_bag: {
          id: 67915,
          employee_uuid: '61b846c6-2d44-42c4-83ba-2d0f2068c51e',
          startdt: '2021-07-01 06:00:00',
          enddt: '2021-07-01 15:00:00',
          feiertag: '',
          oncall: '',
          project_id: 598,
          project_uuid: '618e86a1-dfc0-4025-84f8-86516d67120b',
          breaklength: 3600,
          travel: '0',
          comment: 'SAP Unicorn - Telefonica',
          onsite: 1,
          subproject: 0,
        },
      },
    ],
    perdiems: [
      {
        date: 1626566400,
        employee: '61b846c6-2d44-42c4-83ba-2d0f2068c51e',
        type: 7,
        projectUuid: '618e86a1-dfc0-4025-84f8-86516d67120b',
        comment: 'Dresden - Unicorn Meetings - Anreise',
      },
    ],
  };

  const monthEndHandler = () => {
    setEndMonthOpen(false);
  };

  const handleDelete = (uuid: string) => {
    const request = {
      uuid: uuid,
    };
    console.log('prototyp API call', 'DELETE', '/rest/timelog/:loguuid');
    console.log('uuid:', request.uuid);
  };

  const setMonthGetProjectsHandler = (newDate: Date | null) => {
    setSelectedMonth(newDate);
    let requestPrototype;
    if (newDate !== null) {
      requestPrototype = {
        params: {
          year: newDate.getFullYear(),
          month: newDate.getMonth() + 1,
          format: 'traditional',
          scope: 'me',
        },
      };
      fetchProjects(requestPrototype)
        .then((response) => {
          return response.json();
        })
        .then((projectsResponse) => {
          setAvailableProjects(projectsResponse.projects);
        });
      fetchCurrentMonthLogs(requestPrototype)
        .then((response) => {
          return response.json();
        })
        .then((LogsResponse) => {
          setoldLogs(LogsResponse);
        });
    }
  };

  const setProjectGetLogsHandler = (event: SelectChangeEvent) => {
    const projectFiltered = availableProjects.filter(
      (project) => project.name === (event.target.value as string),
    );
    setProject(event.target.value as string);
    setProjectUuid(projectFiltered[0].uuid);
    setProjectTypes(projectFiltered[0].worktypes);
    let requestPrototype;
    if (selectedMonth !== null) {
      requestPrototype = {
        params: {
          year: selectedMonth.getFullYear(),
          month: selectedMonth.getMonth() + 1,
          format: 'traditional',
        },
      };
    }
  };

  return (
    <Paper>
      <Card elevation={0} sx={{border: 1, borderColor: 'grey.300'}}>
        {endMonthOpen && (
          <MonthEndDialog
            close={monthEndHandler}
            selectedMonth={selectedMonth}
          />
        )}
        <CardContent>
          <Box sx={{mx: 'auto', textAlign: 'start', p: 3}}>
            <Grid container spacing={3}>
              <div className='picker'>
                <Typography style={{color: '#838282'}}>Select month</Typography>
                <DatePicker
                  id='datePicker'
                  wrapperClassName='datePicker'
                  dateFormat='LLLL    yyyy'
                  selected={selectedMonth}
                  showMonthYearPicker
                  showFullMonthYearPicker
                  showTwoColumnMonthYearPicker
                  onChange={(newDate: Date | null) =>
                    setMonthGetProjectsHandler(newDate)
                  }
                ></DatePicker>
              </div>
              <Grid item xs={6}>
                <FormControl fullWidth>
                  <InputLabel id='select-label-projectState'>
                    Project
                  </InputLabel>
                  <Select
                    labelId='select-label-project'
                    id='demo-simple-select-project'
                    value={project}
                    label='Project'
                    onChange={setProjectGetLogsHandler}
                    disabled={!selectedMonth}
                  >
                    {availableProjects.map((project) => (
                      <MenuItem key={project.uuid} value={project.name}>
                        {project.name}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
              </Grid>
              <Grid item xs={3}>
                <Button
                  sx={{mt: 1, width: 250}}
                  size='large'
                  variant='contained'
                  startIcon={<NoteAddIcon />}
                  disabled={!selectedMonth}
                  onClick={() => setEndMonthOpen(true)}
                >
                  end month
                </Button>
              </Grid>
            </Grid>
          </Box>
        </CardContent>
      </Card>
      <>
        <Button onClick={() => setoldLogs(_dummy_old_logs_1)}>oldLogs1</Button>
        <Button onClick={() => setoldLogs(_dummy_old_logs_2)}>oldLogs1</Button>
        <InputCard
          types={projectTypes}
          month={selectedMonth}
          uuidProject={projectUuid}
          uuidLog={uuidLog}
        />
        <TimelogItemList
          timelogs={oldLogs.timelogs}
          perdiems={oldLogs.perdiems}
        />
      </>
    </Paper>
  );
}
